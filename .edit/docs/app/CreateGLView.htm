
<!DOCTYPE html>
<html>

<head>
	<title>GLView</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="../css/themes/default/theme.min.css" />
		<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
		<script src="../js/energize-min.js"></script>
		<script src="../js/jquery-1.8.1.min.js"></script>
		<script src="../../../app.js"></script>
		<script src="../js/example.js"></script>
		<link rel="stylesheet" href="../css/docs.css" />
		<script src="../js/common.js"></script>
		<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>

<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Back</a> <h1>GLView</h1>
	</div><!-- /header -->

	<div data-role="content">

		<p>GLView is a fast 2D canvas suitable for drawing and moving graphics around on the screen quickly, ideal for games.</p>

		<p>You can create a GLView object using the <b>CreateGLView</b> method of the <b>app</b> object: </p>

		<div class="samp">&nbsp;glview = app.CreateGLView( <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a>, <a href="#pop_str_arr" data-transition="pop" data-rel="popup">options</a> );</div>

		<p>The options parameter should be set to <b>"Fast2d"</b>.</p>

		<p>Use the <b>CreateImage</b> method of the GLView object to create an image that can be used with the GLView:</p>

		<div class="samp">&nbsp;glview.CreateImage( <a href="#pop_str_pth" data-transition="pop" data-rel="popup">fileName</a>, <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> );</div>

		<p>Pass the name of a function to CreateImage, which will be called once the image is ready to use.</p>

		<p>The <b>DrawImage</b> method can be used to draw GLView images:</p>

		<div class="samp">&nbsp;glview.DrawImage( <a href="#pop_obj_img" data-transition="pop" data-rel="popup">image</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a>, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a>, <a href="#pop_num_ang" data-transition="pop" data-rel="popup">angle</a> );</div>

		<p>Once all drawing has been done, the <b>Render</b> method must be called to render all the GLView graphics to the screen.</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - DrawImage</h3>
				<div id="examp1" style="font-size:70%">
					function OnStart()<br>
					{<br>
					&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "FillXY" );<br>
					<br>
					<b id="snip1"  style="font-size:100%">
					&nbsp;&nbsp;glview = app.CreateGLView( 1, 1, "Fast2d" );<br>
					&nbsp;&nbsp;lay.AddChild( glview );<br>
					<br>
					&nbsp;&nbsp;img = glview.CreateImage( "/Sys/Img/Hello.png", DrawFrame );<br>
					</b>
					<br>
					&nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function DrawFrame()<br>
					{<br>
					&nbsp;&nbsp;glview.DrawImage( img, 0.25, 0.3, 0.5, -1, 45 );<br>
					<br>
					&nbsp;&nbsp;glview.Render();<br>
					}<br>
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<p>To create a rendering loop for a game, use the <b>setInterval</b> JavaScript function to call your drawing function at regular intervals.</p>

		<p>The example below draws a continuously rotating image by calling the DrawFrame function 30 times each second, updating the angle each time:</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - Render Loop</h3>
				<div id="examp2" style="font-size:70%">
					var angle = 0;<br>
					<br>
					function OnStart()<br>
					{<br>
					&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "FillXY" );<br>
					<br>
					<b id="snip2"  style="font-size:100%">
					&nbsp;&nbsp;glview = app.CreateGLView( 1, 1, "Fast2d" );<br>
					&nbsp;&nbsp;lay.AddChild( glview );<br>
					<br>
					&nbsp;&nbsp;img = glview.CreateImage( "/Sys/Img/Hello.png", StartRendering );<br>
					</b>
					<br>
					&nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function StartRendering()<br>
					{<br>
					&nbsp;&nbsp;setInterval( DrawFrame, 1000/30 );<br>
					}<br>
					<br>
					function DrawFrame()<br>
					{<br>
					&nbsp;&nbsp;glview.DrawImage( img, 0.25, 0.3, 0.5, -1, <a href="#pop_num_ang" data-transition="pop" data-rel="popup">angle</a> );<br>
    				<br>
				    &nbsp;&nbsp;angle = angle + 10;<br>
				    &nbsp;&nbsp;if( angle == 360 ) angle = 0;<br>
					<br>
					&nbsp;&nbsp;glview.Render();<br>
					}<br>

				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<p>GLView supports the use of <b>Sprite Sheets</b>. The <b>DrawSprite</b> method can be used to draw part of an image to the GLView.</p>

		<p>The following example uses a sprite sheet containing 8 stages of a character running. The DrawSprite method is used to draw each of the 8 sections in turn to give the effect of the character continuously running:</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - DrawSprite</h3>
				<div id="examp3" style="font-size:70%">
					var spriteCount = 8;<br>
					var srcWidth = 50;<br>
					var srcHeight = 60;<br>
					var frameCount = 0;<br>
					<br>
					function OnStart()<br>
					{<br>
					&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "FillXY" );<br>
					<br>
					<b id="snip3"  style="font-size:100%">
					&nbsp;&nbsp;glview = app.CreateGLView( 1, 1, "Fast2d" );<br>
					&nbsp;&nbsp;lay.AddChild( glview );<br>
					<br>
					&nbsp;&nbsp;img = glview.CreateImage( "/Sys/Img/Sprint.png", StartRendering );<br>
					</b>
					<br>
					&nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function StartRendering()<br>
					{<br>
					&nbsp;&nbsp;setInterval(DrawFrame, 1000/30);<br>
					}<br>
					<br>
					function DrawFrame()<br>
					{<br>
					&nbsp;&nbsp;var spriteIndex = Math.floor(frameCount / 2) % spriteCount;<br>
					<br>
					&nbsp;&nbsp;var sx = spriteIndex * srcWidth;<br>
					&nbsp;&nbsp;var sy = 0;<br>
					<br>
					&nbsp;&nbsp;glview.DrawSprite( img, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">sx</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">sy</a>, srcWidth, srcHeight,<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.3, 0.4, 0.3, -1 );<br>
					<br>
					&nbsp;&nbsp;glview.Render();<br>
					<br>
					&nbsp;&nbsp;frameCount++;<br>
					}
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip3)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp3)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<p>The following methods are available on the GLView object:</p>

		<div class="samp">&nbsp;SetOnTouch( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
   		<div class="samp">&nbsp;SetOnTouchUp( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
    	<div class="samp">&nbsp;SetOnTouchMove( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
    	<div class="samp">&nbsp;SetOnTouchDown( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
    	<div class="samp">&nbsp;SetTouchable( <a href="#pop_bin" data-transition="pop" data-rel="popup">touchable</a> )</div>
		<div class="samp">&nbsp;DrawImage( <a href="#pop_obj_img" data-transition="pop" data-rel="popup">image</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a>, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a>, <a href="#pop_num_ang" data-transition="pop" data-rel="popup">angle</a> )</div>
		<div class="samp">&nbsp;DrawSprite( <a href="#pop_obj_glv" data-transition="pop" data-rel="popup">sheet</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">sx</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">sy</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">sw</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">sh</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">dx</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">dy</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">dw</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">dh</a> )</div>
		<div class="samp">&nbsp;CreateImage( <a href="#pop_str_pth" data-transition="pop" data-rel="popup">fileName</a>, <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;Render()</div>
		<div class="samp">&nbsp;GetContext()</div>

		<br>

	</div><!-- /content -->

<div data-role="popup" id="pop_num" class="ui-content"><b>number</b></div>
<div data-role="popup" id="pop_num_ang" class="ui-content"><b>number</b> - degrees (0-360)</div>
<div data-role="popup" id="pop_num_srw" class="ui-content"><b>number</b> - fraction of screen width</div>
<div data-role="popup" id="pop_num_srh" class="ui-content"><b>number</b> - fraction of screen height</div>
<div data-role="popup" id="pop_num_orw" class="ui-content"><b>number</b> - fraction of object width</div>
<div data-role="popup" id="pop_num_orh" class="ui-content"><b>number</b> - fraction of object height</div>
<div data-role="popup" id="pop_str" class="ui-content"><b>string</b></div>
<div data-role="popup" id="pop_str_pth" class="ui-content"><b>string</b> - "/absolute/" or "relative/"</div>
<div data-role="popup" id="pop_str_arr" class="ui-content"><b>string</b> - comma separated</div>
<div data-role="popup" id="pop_obj" class="ui-content"><b>object</b></div>
<div data-role="popup" id="pop_obj_img" class="ui-content"><b>object</b> - DS image</div>
<div data-role="popup" id="pop_obj_glv" class="ui-content"><b>object</b> - GLV image</div>
<div data-role="popup" id="pop_bin" class="ui-content"><b>boolean</b></div>
<div data-role="popup" id="pop_fnc" class="ui-content"><b>function</b> - (args)</div>
</div><!-- /page -->

</body>
</html>
