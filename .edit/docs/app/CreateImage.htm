
<!DOCTYPE html>
<html>

<head>
	<title>Images</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="../css/themes/default/theme.min.css" />
		<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
		<script src="../js/energize-min.js"></script>
		<script src="../js/jquery-1.8.1.min.js"></script>
		<script src="../../../app.js"></script>
		<script src="../js/example.js"></script>
		<link rel="stylesheet" href="../css/docs.css" />
		<script src="../js/common.js"></script>
		<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>

<div data-role="page" data-theme="a" >

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Back</a> <h1>Images</h1>
	</div><!-- /header -->

	<div data-role="content">

		<p>Create Image controls using the <b>CreateImage</b> method of the <b>app</b> object: </p>

		<div class="samp">&nbsp;img = app.CreateImage( <a href="#pop_str_pth" data-transition="pop" data-rel="popup">file</a>, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a>, <a href="#pop_str_arr" data-transition="pop" data-rel="popup">options</a> );</div>

		<p> Use the <b>SetOnTouch</b> method of the Image object to set the name of a function you want to be called when the Image is touched.</p>

		<p>When Image controls are touched, they send an <b>event object</b> parameter to your callback function which contains details of the touch event, for example the <b>action</b> property
		 of the event object contains <b>"Down"</b>, <b>"Up"</b> or <b>"Move"</b> as the user touches and moves their finger on the screen and the x and y
		 properties contain arrays of touch <b>coordinates</b>.</p>

		<p>If you don't set a size, the image object will match the original image size. If you set one dimension to a positive value and leave the other
		dimension as -1, then the image will maintain its original <b>aspect ratio</b>.</p>
		<p>Specifying both width and height will <b>stretch</b> the image to
		fill the Image object, unless you can use the <b>"ScaleCenter"</b> option to keep the image at it's original size and centered within the Image object</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - Original Size</h3>
				<div id="examp1" style="font-size:70%">
					function OnStart()<br>
					{<br>
					 &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "VCenter,FillXY" );<br><br>
					 <b id="snip1" style="font-size:100%">
					 &nbsp;&nbsp;img = app.CreateImage( "/Sys/Img/Droid1.png" );<br>
					 &nbsp;&nbsp;img.SetOnTouch( img_OnTouch );<br>
					 &nbsp;&nbsp;lay.AddChild( img );<br><br>
					 </b>
					 &nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function img_OnTouch( ev )<br>
					{<br>
					 &nbsp;&nbsp;if( ev.action=="Down" )<br>
					 &nbsp;&nbsp;&nbsp;&nbsp;app.ShowPopup( "Ouch!" );<br>
					}<br>
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - Stretched</h3>
				<div id="examp2" style="font-size:70%">
					function OnStart()<br>
					{<br>
					 &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "VCenter,FillXY" );<br><br>
					 <b id="snip2" style="font-size:100%">
					 &nbsp;&nbsp;img = app.CreateImage( "/Sys/Img/Droid1.png", 0.5, 0.7 );<br>
					 &nbsp;&nbsp;img.SetOnTouch( img_OnTouch );<br>
					 &nbsp;&nbsp;lay.AddChild( img );<br><br>
					 </b>
					 &nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function img_OnTouch( ev )<br>
					{<br>
					 &nbsp;&nbsp;if( ev.action=="Down" )<br>
					 &nbsp;&nbsp;&nbsp;&nbsp;app.ShowPopup( "Aaaargh!" );<br>
					}<br>
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - Maintain Aspect</h3>
				<div id="examp3" style="font-size:70%">
					function OnStart()<br>
					{<br>
					 &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "VCenter,FillXY" );<br><br>
					 <b id="snip3" style="font-size:100%">
					 &nbsp;&nbsp;img = app.CreateImage( "/Sys/Img/Droid1.png", 0.5, -1 );<br>
					 &nbsp;&nbsp;img.SetOnTouch( img_OnTouch );<br>
					 &nbsp;&nbsp;lay.AddChild( img );<br><br>
					 </b>
					 &nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function img_OnTouch( ev )<br>
					{<br>
					 &nbsp;&nbsp;if( ev.action=="Down" )<br>
					 &nbsp;&nbsp;&nbsp;&nbsp;app.ShowPopup( ev.x[0] + ", " + ev.y[0], "Short" );<br>
					}<br>
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip3)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp3)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<h4>Drawing On Images</h4>
		<p>You can use an image control like a <b>Canvas</b> by calling it's drawing methods, such DrawRectangle, DrawCircle,
		DrawImage etc. </p>
		<p>It's possible to draw over a loaded image or you can start with a blank image by passing the value 'null' to
		the CreateImage method instead of a filename. You can set the background color of your blank image using the 'SetColor' method.</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Example - Draw Shapes</h3>
				<div id="examp4" style="font-size:70%">
					function OnStart()<br>
					{<br>
					 &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "VCenter,FillXY" );<br><br>
					 <b id="snip3" style="font-size:100%">
					 &nbsp;&nbsp;img = app.CreateImage( null, 0.8, 0.8 );<br>
					 &nbsp;&nbsp;lay.AddChild( img );<br><br>
					 &nbsp;&nbsp;img.SetColor( "#8888ff" );<br>
					 &nbsp;&nbsp;img.SetPaintColor( "#ff0000" );<br>
					 &nbsp;&nbsp;img.DrawCircle( 0.5, 0.5, 0.1 );<br>
					 &nbsp;&nbsp;img.DrawRectangle( 0.7, 0.7, 0.05 );<br>
					 &nbsp;&nbsp;<br>
					 </b>
					 &nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip4)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp4)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp4)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>
		<br>
		<p>The following methods are avaiable on the Image object:</p>

		<div class="samp">&nbsp;GetVisibility()</div>
		<div class="samp">&nbsp;SetVisibility( <a href="#pop_bin" data-transition="pop" data-rel="popup">visibility</a> )</div>
		<div class="samp">&nbsp;SetPadding( <a href="#pop_num_prw" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prh" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_prw" data-transition="pop" data-rel="popup">right</a>, <a href="#pop_num_prh" data-transition="pop" data-rel="popup">bottom</a> )</div>
		<div class="samp">&nbsp;SetMargins( <a href="#pop_num_prw" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prh" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_prw" data-transition="pop" data-rel="popup">right</a>, <a href="#pop_num_prh" data-transition="pop" data-rel="popup">bottom</a> )</div>
		<div class="samp">&nbsp;SetPosition( <a href="#pop_num_prw" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prh" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;SetSize( <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;GetWidth()</div>
		<div class="samp">&nbsp;GetHeight()</div>

		<div class="samp">&nbsp;Clear()</div>
		<div class="samp">&nbsp;SetAlpha( <a href="#pop_num_dhx" data-transition="pop" data-rel="popup">alpha</a> )</div>
		<div class="samp">&nbsp;SetImage( <a href="#pop_str_pth" data-transition="pop" data-rel="popup">fileName</a>, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;SetImage( img, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;SetOnLoad( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;Save( <a href="#pop_str_pth" data-transition="pop" data-rel="popup">fileName</a> )</div>
		<div class="samp">&nbsp;GetAbsHeight()</div>
    	<div class="samp">&nbsp;GetAbsWidth()</div>
    	<div class="samp">&nbsp;GetPixelData( <a href="#pop_str_fmt" data-transition="pop" data-rel="popup">format</a>, <a href="#pop_num_prw" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prh" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;SetMaxRate( ms )</div>
		<div class="samp">&nbsp;SetOnTouch( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;SetOnTouchUp( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;SetOnTouchMove( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;SetOnTouchDown( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;SetOnLongTouch( <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;SetTouchable( <a href="#pop_bin" data-transition="pop" data-rel="popup">touchable</a> )</div>
		<div class="samp">&nbsp;DrawImage( <a href="#pop_obj_img" data-transition="pop" data-rel="popup">image</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">w</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">h</a>, <a href="#pop_num_ang" data-transition="pop" data-rel="popup">angle</a> )</div>
		<div class="samp">&nbsp;DrawImageMtx( <a href="#pop_obj_img" data-transition="pop" data-rel="popup">image</a>, <a href="#pop_arr" data-transition="pop" data-rel="popup">matrix</a> )</div>
		<div class="samp">&nbsp;DrawPoint( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a> )</div>
		<div class="samp">&nbsp;DrawCircle( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">radius</a> )</div>
		<div class="samp">&nbsp;DrawArc( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x1</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y1</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x2</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y2</a>, <a href="#pop_num" data-transition="pop" data-rel="popup">start</a>, <a href="#pop_num_ang" data-transition="pop" data-rel="popup">sweep</a> )</div>
		<div class="samp">&nbsp;DrawLine( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x1</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y1</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x2</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y2</a> )</div>
		<div class="samp">&nbsp;DrawRectangle( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x1</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y1</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x2</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y2</a> )</div>
		<div class="samp">&nbsp;DrawText( <a href="#pop_str" data-transition="pop" data-rel="popup">text</a>, <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a> )</div>
		<div class="samp">&nbsp;Update()</div>
    	<div class="samp">&nbsp;SetAutoUpdate( <a href="#pop_bin" data-transition="pop" data-rel="popup">onoff</a> )</div>
		<div class="samp">&nbsp;SetColor( <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode</a> )</div>
		<div class="samp">&nbsp;SetTextSize( <a href="#pop_num_int" data-transition="pop" data-rel="popup">size</a> )</div>
		<div class="samp">&nbsp;SetFontFile( <a href="#pop_str_pth" data-transition="pop" data-rel="popup">file</a> )</div>
		<div class="samp">&nbsp;SetLineWidth( <a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a> )</div>
		<div class="samp">&nbsp;SetPaintColor( <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode</a> )</div>
		<div class="samp">&nbsp;SetPaintStyle( <a href="#pop_str_sty" data-transition="pop" data-rel="popup">style</a> )</div>
		<div class="samp">&nbsp;Rotate( <a href="#pop_num_ang" data-transition="pop" data-rel="popup">angle</a>, <a href="#pop_num_flt" data-transition="pop" data-rel="popup">pivotX</a>, <a href="#pop_num_flt" data-transition="pop" data-rel="popup">pivotY</a> )</div>
		<div class="samp">&nbsp;Move( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a> )</div>
		<div class="samp">&nbsp;Scale( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a> )</div>
		<div class="samp">&nbsp;Skew( <a href="#pop_num_orw" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_orh" data-transition="pop" data-rel="popup">y</a> )</div>
    	<div class="samp">&nbsp;Transform( <a href="#pop_arr" data-transition="pop" data-rel="popup">matrix</a> )</div>
		<div class="samp">&nbsp;Reset()</div>

		<br>

	</div><!-- /content -->

<div data-role="popup" id="pop_num" class="ui-content"><b>number</b></div>
<div data-role="popup" id="pop_num_int" class="ui-content"><b>number</b></div>
<div data-role="popup" id="pop_num_flt" class="ui-content"><b>number</b></div>
<div data-role="popup" id="pop_num_dhx" class="ui-content"><b>number</b> - 0-255</div>
<div data-role="popup" id="pop_num_ang" class="ui-content"><b>number</b> - degrees (0-360)</div>
<div data-role="popup" id="pop_num_srw" class="ui-content"><b>number</b> - fraction of screen width</div>
<div data-role="popup" id="pop_num_srh" class="ui-content"><b>number</b> - fraction of screen height</div>
<div data-role="popup" id="pop_num_orw" class="ui-content"><b>number</b> - fraction of object width</div>
<div data-role="popup" id="pop_num_orh" class="ui-content"><b>number</b> - fraction of object height</div>
<div data-role="popup" id="pop_num_prw" class="ui-content"><b>number</b> - fraction of parent width</div>
<div data-role="popup" id="pop_num_prh" class="ui-content"><b>number</b> - fraction of parent height</div>
<div data-role="popup" id="pop_str" class="ui-content"><b>string</b></div>
<div data-role="popup" id="pop_str_col" class="ui-content"><b>string</b><br>&nbsp;&nbsp;hexadecimal: "#rrggbb", "#aarrggbb"<br>&nbsp;&nbsp;colourName: "red",  "green", ...</div>
<div data-role="popup" id="pop_str_pth" class="ui-content"><b>string</b> - "/absolute/" or "relative/"</div>
<div data-role="popup" id="pop_str_fmt" class="ui-content"><b>string</b> - format</div>
<div data-role="popup" id="pop_str_sty" class="ui-content"><b>string</b> - style</div>
<div data-role="popup" id="pop_str_arr" class="ui-content"><b>string</b> - comma separated</div>
<div data-role="popup" id="pop_obj" class="ui-content"><b>object</b></div>
<div data-role="popup" id="pop_obj_img" class="ui-content"><b>object</b> - DS image</div>
<div data-role="popup" id="pop_arr" class="ui-content"><b>array</b></div>
<div data-role="popup" id="pop_bin" class="ui-content"><b>boolean</b></div>
<div data-role="popup" id="pop_fnc" class="ui-content"><b>function</b> - (args)</div>
</div><!-- /page -->

</body>
</html>
